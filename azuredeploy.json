{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {

    "aseLocation": {
      "type": "string",
      "allowedValues": [
        "Central US",
        "East US",
        "East US 2",
        "North Central US",
        "South Central US",
        "West Central US",
        "West US",
        "West US 2",
        "Canada Central",
        "North Europe",
        "West Europe",
        "East Asia",
        "Southeast Asia",
        "Japan East",
        "Japan West",
        "Brazil South",
        "Australia East",
        "Australia Southeast",
        "West India",
        "Central India",
        "South India"
      ],
      "metadata": {
        "description": "Location of the App Service Environment. This is a workaround because ASE doesn't like the normalized (ie: westeurope) naming now. Obviously, has to be the same location as your Resource Group."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "The Virtual Network address prefix."
      }
    },
    "appgwSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "The Application Gateway subnet."
      }
    },
    "dnsSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.2.0/24",
      "metadata": {
        "description": "The DNS subnet."
      }
    },
    "aseSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.3.0/24",
      "metadata": {
        "description": "The App Service Environment subnet."
      }
    },
    "bindIp": {
      "type": "string",
      "defaultValue": "10.0.2.50",
      "metadata": {
        "description": "The Private Static IP that will be allocated to BIND (DNS) server. This will be set as your Virtual Network's DNS server."
      }
    },
    "aseVirtualIp": {
      "type": "string",
      "defaultValue": "10.0.3.9",
      "metadata": {
        "description": "The Virtual IP of the App Service Environment's Internal Load Balancer. There is no easy way to obtain it post deployment, hence it is here. You may need to re-run the deployment after it is done to update this value."
      }
    },

    "aseName": {
      "type": "string",
      "defaultValue": "appgw-ase",
      "metadata": {
        "description": "Name of the App Service Environment"
      }
    },
    "aseFrontEndSize": {
      "type": "string",
      "allowedValues": [
        "Medium",
        "Large",
        "ExtraLarge"
      ],
      "defaultValue": "Medium",
      "metadata": {
        "description": "Instance size for the front-end pool.  Maps to P2,P3,P4."
      }
    },
    "aseFrontEndCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of instances in the front-end pool.  Minimum of two."
      }
    },
    "aseWorkerPoolOneInstanceSize": {
      "type": "string",
      "allowedValues": [
        "Small",
        "Medium",
        "Large",
        "ExtraLarge"
      ],
      "defaultValue": "Small",
      "metadata": {
        "description": "Instance size for worker pool one.  Maps to P1,P2,P3,P4."
      }
    },
    "aseWorkerPoolOneInstanceCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of instances in worker pool one.  Minimum of two."
      }
    },
    "aseWorkerPoolTwoInstanceSize": {
      "type": "string",
      "allowedValues": [
        "Small",
        "Medium",
        "Large",
        "ExtraLarge"
      ],
      "defaultValue": "Small",
      "metadata": {
        "description": "Instance size for worker pool two.  Maps to P1,P2,P3,P4."
      }
    },
    "aseWorkerPoolTwoInstanceCount": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of instances in worker pool two.  Can be zero if not using worker pool two."
      }
    },
    "aseWorkerPoolThreeInstanceSize": {
      "type": "string",
      "allowedValues": [
        "Small",
        "Medium",
        "Large",
        "ExtraLarge"
      ],
      "defaultValue": "Small",
      "metadata": {
        "description": "Instance size for worker pool three.  Maps to P1,P2,P3,P4."
      }
    },
    "aseWorkerPoolThreeInstanceCount": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of instances in worker pool three.  Can be zero if not using worker pool three."
      }
    },

    "appPlanName": {
      "type": "string",
      "defaultValue": "appgw-ase-plan",
      "metadata": {
        "description": "Name of the App Service Plan"
      }
    },
    "appName": {
      "type": "string",
      "defaultValue": "webapp1",
      "metadata": {
        "description": "The name of the app to be deployed. This will be prepended to the App Service Environment subdomain to create the app's hostname."
      }
    },
    "aseDNSSuffix": {
      "type": "string",
      "defaultValue": "internal.domain.com",
      "metadata": {
        "description": "The subdomain of the App Service Environment. This doesn't need to be a real domain."
      }
    },
    "rootZoneName": {
      "type": "string",
      "defaultValue": "domain.com",
      "metadata": {
        "description": "The public hostname of the app to be deployed. Make sure that your SSL certificate works for this and that you can manage this domain's DNS."
      }
    },
    "externalAppHostname": {
      "type": "string",
      "defaultValue": "webapp1.domain.com",
      "metadata": {
        "description": "The public hostname of the app to be deployed. Make sure that your SSL certificate works for this and that you can manage this domain's DNS."
      }
    },

    "appgwSkuName": {
      "type": "string",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large"
      ],
      "defaultValue": "Standard_Medium",
      "metadata": {
        "description": "The SKU of the Application Gateway."
      }
    },
    "appgwCapacity": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of instances running in the Application Gateway"
      }
    },

    "pfxBase64": {
      "type": "string",
      "metadata": {
        "description": "A pfx file encoded as a base-64 string.  The pfx contains the SSL certificate that will be configured as the default SSL certificate for the ASE and the AppGW for end-to-end SSL."
      }
    },
    "pfxThumbprint": {
      "type": "string",
      "metadata": {
        "description": "The hexadecimal certificate thumbprint of the certificate contained in pfxBase64.  All spaces need to be removed from the hex string."
      }
    },
    "pfxPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the .pfx certificate"
      }
    },
    "cerBase64": {
      "type": "string",
      "metadata": {
        "description": "The Base64 encoded string of your .cer certificate. That's the public part of your SSL certificate. You may use the DigiCert Certificate Utility https://www.digicert.com/util/pfx-certificate-management-utility-import-export-instructions.htm"
      }
    },

    "bindUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the BIND DNS Virtual Machine."
      }
    },
    "bindPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the BIND DNS Virtual Machine."
      }
    },
    "scriptsLocation": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/sabbour/appgw-aseilbssl/master",
      "metadata": {
        "description": "Container in staging storage account to receive post-build staging folder upload"
      }
    },
    "customScriptTimestamp": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Timestamp sent to the CustomScript extension. If you need to run the script again, you need to change this value when running the template."
      }
    }
  },
  "variables": {
    "vnetName": "appgw-vnet",
    "appgwName": "appgw",
    "bindVMName": "appgw-bind",
    "appgwPublicIpName": "appgw-publicip",
    "bindNSGName": "appgw-bind-nsg",
    "appgwSubnetName": "appgw-subnet",
    "dnsSubnetName": "dns-subnet",
    "aseSubnetName": "ase-subnet",
    "certificateName": "[concat(parameters('pfxThumbprint'),'_',parameters('aseName'),'_InternalLoadBalancingASE')]",
    "backendFQDN": "[concat(parameters('appName'),'.',parameters('aseDNSSuffix'))]",
    "apiVersion": "2017-03-01",
    "vnetRef": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
    "appgwSubnetRef": "[concat(variables('vnetRef'),'/subnets/',variables('appgwSubnetName'))]",
    "dnsSubnetRef": "[concat(variables('vnetRef'), '/subnets/', variables('dnsSubnetName'))]",
    "appgwPublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('appgwPublicIpName'))]",
    "applicationGatewayRef": "[resourceId('Microsoft.Network/applicationGateways',variables('appgwName'))]",
    "aseRef": "[resourceId('Microsoft.Web/hostingEnvironments',parameters('aseName'))]",
    "appPlanRef": "[resourceId('Microsoft.Web/serverFarms',parameters('appPlanName'))]",
    "bindCommandToExecute": "",
    "bindStorageType": "Standard_LRS",
    "bindUbuntuOSVersion": "14.04.2-LTS",
    "bindImagePublisher": "Canonical",
    "bindImageOffer": "UbuntuServer",
    "bindOSDiskName": "appgw-bindOSDisk",
    "bindVmSize": "Standard_A1",
    "bindNicName": "[concat(variables('bindVMName'), '-nic')]"
  },

  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Virtual Network"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "dhcpOptions": {
          "dnsServers": ["[parameters('bindIp')]"]
        },
        "subnets": [
          {
            "name": "[variables('appgwSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('appgwSubnetPrefix')]"
            }
          },
          {
            "name": "[variables('dnsSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('dnsSubnetPrefix')]"
            }
          },
          {
            "name": "[variables('aseSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('aseSubnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('appgwPublicIpName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      },
      "tags": {
        "displayName": "AppGW public IP address"
      }
    },

    {
      "apiVersion": "[variables('apiVersion')]",
      "name": "[variables('appgwName')]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Application Gateway"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('appgwPublicIpName'))]",
        "[concat('Microsoft.Web/hostingEnvironments/', parameters('aseName'))]"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('appgwSkuName')]",
          "tier": "Standard",
          "capacity": "[parameters('appgwCapacity')]"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appgw_gatewayIpconfig",
            "properties": {
              "subnet": {
                "id": "[variables('appgwSubnetRef')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appgw_frontendPort_https_443",
            "properties": {
              "Port": 443
            }
          },
          {
            "name": "appgw_frontendPort_http_80",
            "properties": {
              "Port": 80
            }
          }
        ],
        "sslCertificates": [
          {
            "name": "sslcertificate",
            "properties": {
              "data": "[parameters('pfxBase64')]",
              "password": "[parameters('pfxPassword')]"
            }
          }
        ],
        "authenticationCertificates": [
          {
            "name": "backend_whitelist_sslcertificate",
            "properties": {
              "data": "[parameters('cerBase64')]"
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appgw_frontendip",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('appgwPublicIPRef')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[concat(variables('backendFQDN'),'_probe_https')]",
            "properties": {
              "protocol": "Https",
              "host": "[variables('backendFQDN')]",
              "path": "/",
              "interval": 30,
              "timeout": 120,
              "unhealthyThreshold": 8
            }
          },
          {
            "name": "[concat(variables('backendFQDN'),'_probe_http')]",
            "properties": {
              "protocol": "Http",
              "host": "[variables('backendFQDN')]",
              "path": "/",
              "interval": 30,
              "timeout": 120,
              "unhealthyThreshold": 8
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "[concat(variables('backendFQDN'),'_setting_http')]",
            "properties": {
              "Port": 80,
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled",
              "probe": {
                "id": "[concat(variables('applicationGatewayRef'), '/probes/', variables('backendFQDN'), '_probe_http')]"
              }
            }
          },
          {
            "name": "[concat(variables('backendFQDN'),'_setting_https')]",
            "properties": {
              "Port": 443,
              "Protocol": "Https",
              "CookieBasedAffinity": "Disabled",
              "probe": {
                "id": "[concat(variables('applicationGatewayRef'), '/probes/', variables('backendFQDN'), '_probe_https')]"
              },
              "authenticationCertificates": [
                {
                  "id": "[concat(variables('applicationGatewayRef'), '/authenticationCertificates/backend_whitelist_sslcertificate')]"
                }
              ]
            }
          }
        ],
        "httpListeners": [
          {
            "name": "[concat(parameters('externalAppHostname'),'_listener_http')]",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('applicationGatewayRef'), '/frontendIPConfigurations/appgw_frontendip')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('applicationGatewayRef'), '/frontendPorts/appgw_frontendPort_http_80')]"
              },
              "Protocol": "Http",
              "hostName": "[parameters('externalAppHostname')]",
              "SslCertificate": null
            }
          },
          {
            "name": "[concat(parameters('externalAppHostname'),'_listener_https')]",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('applicationGatewayRef'), '/frontendIPConfigurations/appgw_frontendip')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('applicationGatewayRef'), '/frontendPorts/appgw_frontendPort_https_443')]"
              },
              "Protocol": "Https",
              "hostName": "[parameters('externalAppHostname')]",
              "SslCertificate": {
                "Id": "[concat(variables('applicationGatewayRef'), '/sslCertificates/sslcertificate')]"
              },
              "RequireServerNameIndication": "true"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[concat(variables('backendFQDN'),'_pool')]",
            "properties": {
              "BackendAddresses": [
                {
                  "IpAddress": "[parameters('aseVirtualIp')]"
                }
              ]
            }
          }
        ],
        "requestRoutingRules": [
          {
            "name": "[concat(variables('backendFQDN'),'_rule_http')]",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayRef'), '/httpListeners/', parameters('externalAppHostname'),'_listener_http')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('applicationGatewayRef'), '/backendAddressPools/', variables('backendFQDN'),'_pool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('applicationGatewayRef'), '/backendHttpSettingsCollection/', variables('backendFQDN'),'_setting_http')]"
              }
            }
          },
          {
            "name": "[concat(variables('backendFQDN'),'_rule_https')]",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayRef'), '/httpListeners/', parameters('externalAppHostname'),'_listener_https')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('applicationGatewayRef'), '/backendAddressPools/', variables('backendFQDN'),'_pool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('applicationGatewayRef'), '/backendHttpSettingsCollection/', variables('backendFQDN'),'_setting_https')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.Web/hostingEnvironments",
      "name": "[parameters('aseName')]",
      "location": "[parameters('aseLocation')]",
      "tags": {
        "displayName": "App Service Environment"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('bindVMName'))]"
      ],
      "properties": {
        "name": "[parameters('aseName')]",
        "location": "[parameters('aseLocation')]",
        "ipSslAddressCount": "0",
        "internalLoadBalancingMode": "3",
        "clusterSettings": [
          {
            "name": "DefaultSslCertificateThumbprint",
            "value": "[parameters('pfxThumbprint')]"
          }
        ],
        "dnsSuffix": "[parameters('aseDNSSuffix')]",
        "virtualNetwork": {
          "Id": "[variables('vnetRef')]",
          "Subnet": "[variables('aseSubnetName')]"
        },
        "multiSize": "[parameters('aseFrontEndSize')]",
        "multiRoleCount": "[parameters('aseFrontEndCount')]",
        "workerPools": [
          {
            "workerSizeId": 0,
            "workerSize": "[parameters('aseWorkerPoolOneInstanceSize')]",
            "workerCount": "[parameters('aseWorkerPoolOneInstanceCount')]"
          },
          {
            "workerSizeId": 1,
            "workerSize": "[parameters('aseWorkerPoolTwoInstanceSize')]",
            "workerCount": "[parameters('aseWorkerPoolTwoInstanceCount')]"
          },
          {
            "workerSizeId": 2,
            "workerSize": "[parameters('aseWorkerPoolThreeInstanceSize')]",
            "workerCount": "[parameters('aseWorkerPoolThreeInstanceCount')]"
          }
        ]
      }
    },

    {
      "name": "[parameters('appPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-09-01",
      "dependsOn": [
        "[concat('Microsoft.Web/hostingEnvironments/', parameters('aseName'))]"
      ],
      "tags": {
        "displayName": "App Service Plan"
      },
      "properties": {
        "name": "[parameters('appPlanName')]",
        "workerSize": 1,
        "numberOfWorkers": 1,
        "hostingEnvironment": "[parameters('aseName')]",
        "hostingEnvironmentId": "[variables('applicationGatewayRef')]"
      },
      "sku": {
        "Tier": "Premium",
        "Name": "P1"
      },
      "resources": [
        {
          "name": "[parameters('appName')]",
          "type": "Microsoft.Web/sites",
          "kind": "app",
          "location": "[resourceGroup().location]",
          "apiVersion": "2016-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/serverfarms', parameters('appPlanName'))]"
          ],
          "tags": {
            "displayName": "Web App"
          },
          "properties": {
            "name": "[parameters('appName')]",
            "serverFarmId": "[variables('appPlanRef')]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/hostnameBindings",
              "name": "[concat(parameters('appName'), '/', parameters('externalAppHostname'))]",
              "apiVersion": "2016-03-01",
              "tags": {
                "displayName": "Custom Domain"
              },
              "properties": {
                "sslState": "SniEnabled",
                "thumbprint": "[reference(resourceId('Microsoft.Web/certificates', variables('certificateName'))).Thumbprint]"
              },
              "dependsOn": [
                "[concat('Microsoft.Web/sites/',parameters('appName'))]",
                "[concat('Microsoft.Web/certificates/',variables('certificateName'))]"
              ]
            }
          ]
        }
      ]
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.Web/certificates",
      "name": "[variables('certificateName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "SSL Certificate"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/hostingEnvironments/', parameters('aseName'))]"
      ],
      "properties": {
        "pfxBlob": "[parameters('pfxBase64')]",
        "password": "[parameters('pfxPassword')]",
        "hostingEnvironmentProfile": {
          "id": "[variables('aseRef')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/dnszones",
      "name": "[parameters('rootZoneName')]",
      "apiVersion": "2016-04-01",
      "location": "global",
      "tags": {},
      "properties": {
        "maxNumberOfRecordSets": 5000,
        "numberOfRecordSets": 3
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/dnszones/A",
      "name": "[concat(parameters('rootZoneName'),'/',parameters('appName'))]",
      "apiVersion": "2016-04-01",
      "properties": {
        "TTL": 120,
        "ARecords": [
          {
            "ipv4Address": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('appgwPublicIpName')), '2016-09-01').ipAddress]"
          }
        ]

      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/dnszones', parameters('rootZoneName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('appgwPublicIpName'))]"
      ]
    },
    {
      "name": "[variables('bindVMName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-04-30-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('bindNicName'))]"
      ],
      "tags": {
        "displayName": "appgw-bind"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('bindVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('bindVMName')]",
          "adminUsername": "[parameters('bindUsername')]",
          "adminPassword": "[parameters('bindPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('bindImagePublisher')]",
            "offer": "[variables('bindImageOffer')]",
            "sku": "[variables('bindUbuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "appgw-bind-osdisk",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('bindNicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "SetupBindCustomScript",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2016-03-30",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('bindVMName'))]"
          ],
          "tags": {
            "displayName": "SetupBindCustomScript"
          },
          "properties": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(parameters('scriptsLocation'), '/scripts/install-bind.sh')]",
                "[concat(parameters('scriptsLocation'), '/scripts/named.conf.local')]",
                "[concat(parameters('scriptsLocation'), '/scripts/named.conf.options')]",
                "[concat(parameters('scriptsLocation'), '/scripts/resolv.conf')]",
                "[concat(parameters('scriptsLocation'), '/scripts/zone.db')]"
              ],
              "commandToExecute": "[concat('sh install-bind.sh ', parameters('aseDNSSuffix'), ' ', parameters('aseVirtualIp'), ' ', parameters('bindIP'))]",
              "timestamp": "[parameters('customScriptTimestamp')]"
            }
          }
        }
      ]
    },

    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('bindNSGName')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "BIND DNS Network Security Group"
      },
      "properties": {
        "securityRules": [          
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[variables('bindNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bindNSGName'))]"
      ],
      "tags": {
        "displayName": "bindNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIpAddress": "[parameters('bindIP')]",
              "subnet": {
                "id": "[variables('dnsSubnetRef')]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bindNSGName'))]"
              }
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "ApplicationGatewayPublicIp": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('appgwPublicIpName')), '2016-09-01').ipAddress]"
    },
    "ApplicationGatewayHostname": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('appgwPublicIpName')), '2016-09-01').dnsSettings.fqdn]"
    },
    "AzureDNSNS1": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/dnsZones/', parameters('rootZoneName')), '2016-04-01').nameServers[0]]"
    },
    "AzureDNSNS2": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/dnsZones/', parameters('rootZoneName')), '2016-04-01').nameServers[1]]"
    },
    "AzureDNSNS3": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/dnsZones/', parameters('rootZoneName')), '2016-04-01').nameServers[2]]"
    },
    "AzureDNSNS4": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/dnsZones/', parameters('rootZoneName')), '2016-04-01').nameServers[3]]"
    }
  }
}
